//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HolidayBooking.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HolidayBookingEntities : DbContext
    {
        public HolidayBookingEntities()
            : base("name=HolidayBookingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeHoliday> EmployeeHolidays { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> AddEmployee(string empName, Nullable<System.DateTime> dateOfJoining, Nullable<int> holidaysEntitled, Nullable<bool> dormant)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var dateOfJoiningParameter = dateOfJoining.HasValue ?
                new ObjectParameter("DateOfJoining", dateOfJoining) :
                new ObjectParameter("DateOfJoining", typeof(System.DateTime));
    
            var holidaysEntitledParameter = holidaysEntitled.HasValue ?
                new ObjectParameter("HolidaysEntitled", holidaysEntitled) :
                new ObjectParameter("HolidaysEntitled", typeof(int));
    
            var dormantParameter = dormant.HasValue ?
                new ObjectParameter("Dormant", dormant) :
                new ObjectParameter("Dormant", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddEmployee", empNameParameter, dateOfJoiningParameter, holidaysEntitledParameter, dormantParameter);
        }
    
        public virtual int BookHoliday(Nullable<int> empID, Nullable<int> remainingLeaves, Nullable<System.DateTime> holidayBookedFrom, Nullable<System.DateTime> holidayBookedTill, string reason)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var remainingLeavesParameter = remainingLeaves.HasValue ?
                new ObjectParameter("RemainingLeaves", remainingLeaves) :
                new ObjectParameter("RemainingLeaves", typeof(int));
    
            var holidayBookedFromParameter = holidayBookedFrom.HasValue ?
                new ObjectParameter("HolidayBookedFrom", holidayBookedFrom) :
                new ObjectParameter("HolidayBookedFrom", typeof(System.DateTime));
    
            var holidayBookedTillParameter = holidayBookedTill.HasValue ?
                new ObjectParameter("HolidayBookedTill", holidayBookedTill) :
                new ObjectParameter("HolidayBookedTill", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BookHoliday", empIDParameter, remainingLeavesParameter, holidayBookedFromParameter, holidayBookedTillParameter, reasonParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetRemainingLeaves(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetRemainingLeaves", empIDParameter);
        }
    
        public virtual int UpdateEmployee(Nullable<int> empID, Nullable<bool> dormant)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var dormantParameter = dormant.HasValue ?
                new ObjectParameter("Dormant", dormant) :
                new ObjectParameter("Dormant", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", empIDParameter, dormantParameter);
        }
    
        public virtual ObjectResult<GetEmployees_Result> GetEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployees_Result>("GetEmployees");
        }
    
        public virtual ObjectResult<GetUpcomingHolidays_Result> GetUpcomingHolidays()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpcomingHolidays_Result>("GetUpcomingHolidays");
        }
    }
}
